<?xml version="1.0" standalone="yes"?>
<HMIDataSet xmlns="http://tempuri.org/DataSet1.xsd">
  <xs:schema id="HMIDataSet" targetNamespace="http://tempuri.org/DataSet1.xsd" xmlns:mstns="http://tempuri.org/DataSet1.xsd" xmlns="http://tempuri.org/DataSet1.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
    <xs:element name="HMIDataSet" msdata:IsDataSet="true" msdata:Locale="en-US">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="ProjectTable">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Name" type="xs:string" default="Panel" minOccurs="0" />
                <xs:element name="Location" type="xs:string" minOccurs="0" />
                <xs:element name="Resolution" type="xs:string" minOccurs="0" />
                <xs:element name="Author" type="xs:string" minOccurs="0" />
                <xs:element name="Comments" type="xs:string" minOccurs="0" />
                <xs:element name="Version" type="xs:int" minOccurs="0" />
                <xs:element name="DefaultLanguage" type="xs:string" default="English" minOccurs="0" />
                <xs:element name="TitleEnable" type="xs:boolean" default="true" minOccurs="0" />
                <xs:element name="TitleText" type="xs:string" default="" minOccurs="0" />
                <xs:element name="StartupExpression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="ShutdownExpression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Width" type="xs:short" default="800" minOccurs="0" />
                <xs:element name="Height" type="xs:short" default="480" minOccurs="0" />
                <xs:element name="TitleBar" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="DataVer" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="LogoffTime" type="xs:int" default="30" minOccurs="0" />
                <xs:element name="DaysOfValidity" type="xs:string" default="0" minOccurs="0" />
                <xs:element name="LoginExpression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="LogoutExpression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="NetworkAuthorization" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="LogDataPath" type="xs:int" default="0" minOccurs="0" />
                <xs:element name="TotalDesignTime" type="xs:duration" minOccurs="0" />
                <xs:element name="Password" type="xs:string" default="" minOccurs="0" />
                <xs:element name="DataSubVer" type="xs:int" default="0" minOccurs="0" />
                <xs:element name="AlarmSampingRate" type="xs:int" default="1000" minOccurs="0" />
                <xs:element name="DefaultTagScan" type="xs:int" default="100" minOccurs="0" />
                <xs:element name="DefaultLogSpeed" type="xs:int" default="1" minOccurs="0" />
                <xs:element name="TrendBoxStarIdx" type="xs:short" minOccurs="0" />
                <xs:element name="TrendBoxCount" type="xs:short" minOccurs="0" />
                <xs:element name="AlarmBoxStarIdx" type="xs:short" minOccurs="0" />
                <xs:element name="AlarmBoxCount" type="xs:short" minOccurs="0" />
                <xs:element name="Multi-linkMode" msprop:Generator_UserColumnName="Multi-linkMode" msprop:Generator_ColumnVarNameInTable="_columnMulti_linkMode" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Multi-linkScanRate" msprop:Generator_UserColumnName="Multi-linkScanRate" msprop:Generator_ColumnVarNameInTable="_columnMulti_linkScanRate" type="xs:short" default="1000" minOccurs="0" />
                <xs:element name="Multi-linkTimeout" msprop:Generator_UserColumnName="Multi-linkTimeout" msprop:Generator_ColumnVarNameInTable="_columnMulti_linkTimeout" type="xs:short" default="1000" minOccurs="0" />
                <xs:element name="Multi-linkParameter" msprop:Generator_UserColumnName="Multi-linkParameter" msprop:Generator_ColumnVarNameInTable="_columnMulti_linkParameter" type="xs:string" default="192.168.0.0" minOccurs="0" />
                <xs:element name="OPCParameter" type="xs:string" minOccurs="0" />
                <xs:element name="Model" type="xs:string" minOccurs="0" />
                <xs:element name="SystemEventLog" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="SystemEventPrint" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="ProjectStorage" type="xs:int" default="0" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="ConnectTable">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Name" type="xs:string" minOccurs="0" />
                <xs:element name="UpdateRate" type="xs:int" default="1000" minOccurs="0" />
                <xs:element name="Protocol" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Comment" type="xs:string" minOccurs="0" />
                <xs:element name="OPCServer" type="xs:string" default="None" minOccurs="0" />
                <xs:element name="Port" type="xs:short" default="502" minOccurs="0" />
                <xs:element name="IPAddress" type="xs:string" default="192.168.0.123" minOccurs="0" />
                <xs:element name="ComPort" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Address" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="BaundRate" type="xs:int" default="38400" minOccurs="0" />
                <xs:element name="Parity" type="xs:string" default="None" minOccurs="0" />
                <xs:element name="DataBits" msdata:Caption="Data Bits" type="xs:short" default="8" minOccurs="0" />
                <xs:element name="StopBits" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="ModuleName" type="xs:string" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="SchedulerTable">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Type" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Action" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Expression" type="xs:string" minOccurs="0" />
                <xs:element name="Day" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Hour" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Minute" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Second" type="xs:short" default="10" minOccurs="0" />
                <xs:element name="Millisecond" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Weekly" type="xs:short" default="0" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="EventAlarm">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Tag" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Type" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="SetpointType" type="xs:short" minOccurs="0" />
                <xs:element name="SetpointValue" type="xs:double" default="0" minOccurs="0" />
                <xs:element name="SetpointTag" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Group" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Expression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Hysteresis" type="xs:double" default="0" minOccurs="0" />
                <xs:element name="Job" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Message" type="xs:string" default="" minOccurs="0" />
                <xs:element name="RateTime" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Decimal" type="xs:short" default="2" minOccurs="0" />
                <xs:element name="BitWise" type="xs:unsignedInt" default="0" minOccurs="0" />
                <xs:element name="Print" type="xs:short" default="0" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Security">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Name" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Level" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Password" type="xs:string" default="INITPSWD" minOccurs="0" />
                <xs:element name="DaysOfValidity" type="xs:short" default="0" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Language">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="English" type="xs:string" default="" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="EventMethod">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="ScreenName" type="xs:string" default="&quot;&quot;" minOccurs="0" />
                <xs:element name="EventName" type="xs:string" default="&quot;&quot;" minOccurs="0" />
                <xs:element name="Parameter" type="xs:string" default="&quot;&quot;" minOccurs="0" />
                <xs:element name="Method" type="xs:string" minOccurs="0" />
                <xs:element name="CtrlName" type="xs:string" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Function">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Name" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Expression" type="xs:string" default="" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="DataLog">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Tag" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Trigger" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Method" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="Speed" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Tolerance" type="xs:double" default="1" minOccurs="0" />
                <xs:element name="MaxPoint" type="xs:unsignedInt" default="1000" minOccurs="0" />
                <xs:element name="Action" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="Name" type="xs:string" minOccurs="0" />
                <xs:element name="Comment" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Unit" type="xs:string" default="" minOccurs="0" />
                <xs:element name="Print" type="xs:short" default="1" minOccurs="0" />
                <xs:element name="OldName" type="xs:string" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="SystemTag">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Name" type="xs:string" default="Tag" minOccurs="0" />
                <xs:element name="Type" type="xs:string" default="Analog" minOccurs="0" />
                <xs:element name="Comment" type="xs:string" minOccurs="0" />
                <xs:element name="Scan" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="ScanRate" type="xs:int" default="1000" minOccurs="0" />
                <xs:element name="BindStartIdx" type="xs:short" minOccurs="0" />
                <xs:element name="BindCount" type="xs:short" minOccurs="0" />
                <xs:element name="ReadOnly" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="DisplayStartIdx" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="DisplayCount" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="VisibleStartIdx" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="VisibleCount" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="RunModeType" type="xs:short" default="0" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Conversion">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Name" type="xs:string" minOccurs="0" />
                <xs:element name="Type" type="xs:short" default="0" minOccurs="0" />
                <xs:element name="EngHigh" type="xs:double" default="100" minOccurs="0" />
                <xs:element name="EngLow" type="xs:double" default="0" minOccurs="0" />
                <xs:element name="RangeLow" type="xs:double" default="0" minOccurs="0" />
                <xs:element name="Ggin" type="xs:double" default="1" minOccurs="0" />
                <xs:element name="Offset" type="xs:double" default="0" minOccurs="0" />
                <xs:element name="ReadExpression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="WriteExpression" type="xs:string" default="" minOccurs="0" />
                <xs:element name="RangeHigh" type="xs:double" default="65535" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">
        <xs:selector xpath=".//mstns:Language" />
        <xs:field xpath="mstns:English" />
      </xs:unique>
    </xs:element>
  </xs:schema>
  <ProjectTable>
    <Name>Graffik_Klava_Final</Name>
    <Location>D:\Projects</Location>
    <Resolution>HMI1550 (768*1024)</Resolution>
    <Author />
    <Comments />
    <Version>1</Version>
    <DefaultLanguage>English</DefaultLanguage>
    <TitleEnable>true</TitleEnable>
    <TitleText />
    <StartupExpression>TurnBitOn(reset,0);
SetValuetoTag(Phh,3.6);
</StartupExpression>
    <ShutdownExpression />
    <Width>768</Width>
    <Height>1024</Height>
    <TitleBar>1</TitleBar>
    <DataVer>122</DataVer>
    <LogoffTime>0</LogoffTime>
    <DaysOfValidity>0</DaysOfValidity>
    <LoginExpression />
    <LogoutExpression />
    <NetworkAuthorization>0</NetworkAuthorization>
    <LogDataPath>0</LogDataPath>
    <TotalDesignTime>P22DT13M49.4234966S</TotalDesignTime>
    <Password />
    <DataSubVer>0</DataSubVer>
    <AlarmSampingRate>1000</AlarmSampingRate>
    <DefaultTagScan>100</DefaultTagScan>
    <DefaultLogSpeed>1</DefaultLogSpeed>
    <Multi-linkMode>0</Multi-linkMode>
    <Multi-linkScanRate>1000</Multi-linkScanRate>
    <Multi-linkTimeout>1000</Multi-linkTimeout>
    <Multi-linkParameter>192.168.0.0</Multi-linkParameter>
    <Model>HMI1550 (768*1024)</Model>
    <SystemEventLog>1</SystemEventLog>
    <SystemEventPrint>0</SystemEventPrint>
    <ProjectStorage>0</ProjectStorage>
  </ProjectTable>
  <ConnectTable>
    <Name>OPCMODBUS</Name>
    <UpdateRate>1000</UpdateRate>
    <Protocol>0</Protocol>
    <Comment>NewPort
</Comment>
    <OPCServer>OPCMODBUS</OPCServer>
    <Port>502</Port>
    <IPAddress>192.168.0.123</IPAddress>
    <ComPort>1</ComPort>
    <Address>1</Address>
    <BaundRate>38400</BaundRate>
    <Parity>None</Parity>
    <DataBits>8</DataBits>
    <StopBits>1</StopBits>
  </ConnectTable>
  <SchedulerTable>
    <Type>1</Type>
    <Action>1</Action>
    <Expression>Function1();
</Expression>
    <Day>0</Day>
    <Hour>0</Hour>
    <Minute>0</Minute>
    <Second>1</Second>
    <Millisecond>0</Millisecond>
    <Weekly>0</Weekly>
  </SchedulerTable>
  <SchedulerTable>
    <Type>1</Type>
    <Action>0</Action>
    <Expression>Function2();
</Expression>
    <Day>0</Day>
    <Hour>0</Hour>
    <Minute>0</Minute>
    <Second>0</Second>
    <Millisecond>500</Millisecond>
    <Weekly>0</Weekly>
  </SchedulerTable>
  <SchedulerTable>
    <Type>0</Type>
    <Action>0</Action>
    <Expression>ClosePopup(Screen2);
</Expression>
    <Day>0</Day>
    <Hour>0</Hour>
    <Minute>0</Minute>
    <Second>0</Second>
    <Millisecond>100</Millisecond>
    <Weekly>0</Weekly>
  </SchedulerTable>
  <SchedulerTable>
    <Type>0</Type>
    <Action>0</Action>
    <Expression>Function4();
</Expression>
    <Day>0</Day>
    <Hour>0</Hour>
    <Minute>0</Minute>
    <Second>3</Second>
    <Millisecond>0</Millisecond>
    <Weekly>0</Weekly>
  </SchedulerTable>
  <Security>
    <Name>Мастер</Name>
    <Level>9</Level>
    <Password>INITPSWD</Password>
    <DaysOfValidity>0</DaysOfValidity>
  </Security>
  <Function>
    <Name>Function1</Name>
    <Expression>System.Drawing.Pen koord;
koord = new System.Drawing.Pen(System.Drawing.Color.Black,1);
System.Drawing.Graphics g1 = main.CreateGraphics();
DateTime stopTime= DateTime.Now;
main.Button3.Enable=true;
//int razmer=69; //для компа
int razmer=15; //для панели
//int razmer=54; //для панели
path="\\ResidentFlash\\";
path_usb="\\Hard Disk\\";
//path="D:\\torrent\\BC_update\\Demo Project\\Graffik_Klava\\PCData\\ResidentFlash\\";
//path_usb="D:\\torrent\\BC_update\\Demo Project\\Graffik_Klava\\PCData\\Hard Disk\\";
//path="D:\\Projects\\For_me\\Graffik_Klava\\PCData\\ResidentFlash\\";
//path_usb="D:\\Projects\\For_me\\Graffik_Klava\\PCData\\Hard Disk\\";
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//РУ1Ш +50мм
if (CurrentSecurityLevel&lt;1){main.CheckBox2.Visible=false;main.CheckBox1.Visible=false;}else{main.CheckBox2.Visible=true;main.CheckBox1.Visible=true;}

konz_virt= NewPort_NewDevice_bit_mask_1; 
//1619 == 100 mm 
//dlinna=NewPort_NewDevice_count_1*0.6;

I_test=NewPort_AI_AI2; // Расстояние лазер
I=((I_test-4000.0)/(20000.0-4000.0))*(500.0-0.0)+0.0;

P_test=NewPort_AI_AI1; //давление(усилие) PC-28 c конверсией в кН
P=((P_test-4000.0)/(20000.0-4000.0))*(1890.0-0.0)+0.0;


//Round(P,NewPort_AI_AI1);


int c_x=0;
int c_y=0;
if  ((reset==1)&amp;(gn==0)){if (tip==2){Lhh_0_v=Lhh_0_1;}; if (tip==1){Lhh_0_v=Lhh_0_1-60.0;}}
if  ((reset==1)&amp;(gn==1)){if (tip==2){Lhh_0_v=Lhh_0_2;}; if (tip==1){Lhh_0_v=Lhh_0_2-60.0;}}

if (!(reset)) //Если есть концевик 5 сек то нет reset (код выполняется), в F4 там реальзована защита от дребезга концевика. Стартует по onChange CheckBox на main
{
main.CheckBox2.Enable=false;
main.Button2.Enable=false;
main.Button5.Enable=false;
//main.Button7.Enable=false;
main.Button9.Enable=false;
Screen4.Button9.Enable=false;
main.DigitalBox2.Visible=true;  
main.DigitalBox5.Visible=true;  
//main.NumericUpDown2.Visible=true;  
//main.NumericUpDown5.Visible=true;  
//main.DigitalBox5.Visible=true;  
work_off=1;

if (koleso==1){c_x=260;c_y=573;I=(((I_test-4000.0)/(20000.0-4000.0))*(500.0-0.0)+0.0)-Lhh_0_v;}//260 573  |||||  99  669
if (koleso==3){c_x=260;c_y=1009;I=(((I_test-4000.0)/(20000.0-4000.0))*(500.0-0.0)+0.0)-Lhh_0_v;}//260 1009  ||||| 99 1011

     if (count==0)
     {
     X1=c_x;Y1=c_y;//count 0
   
         if (gn==0) //count 0
       {
         //main.ComboBox2.Items.Add("");
         main.Label1.Text="";
         main.Label1.Text+=stopTime.Hour.ToString("00")+".";
         main.Label1.Text+=stopTime.Minute.ToString("00")+".";
         main.Label1.Text+=stopTime.Second.ToString("00")+"_";
         main.Label1.Text+=stopTime.Day.ToString("00")+".";
         main.Label1.Text+=stopTime.Month.ToString("00")+".";
         main.Label1.Text+=stopTime.Year.ToString("0000")+"_";
         main.TextBox2.Text= main.Label1.Text;  
         main.Label1.Text+=main.TextBox1.Text;
         name = main.Label1.Text.Replace('.','_');

         //сюда втавить таблицу параметров нах...!!!!!!!
         System.IO.StreamWriter file5 = new System.IO.StreamWriter(path + name +".csv", true);
         file5.WriteLine(main.TextBox1.Text);    //№ Диаграммы
         file5.WriteLine(main.TextBox2.Text);    //Дата запресовки
         file5.WriteLine(main.ComboBox1.Text);   //Тип колесной пары
         file5.WriteLine(main.TextBox4.Text);    //нету (ось №)
         file5.WriteLine(main.TextBox5.Text);    //Колесо прав.
         file5.WriteLine(main.TextBox6.Text);    //Колесо лев.
         file5.WriteLine(main.TextBox7.Text);    //Длин ступ. колеса прав.
         file5.WriteLine(main.TextBox8.Text);    //Я хз резерв пусть
         file5.WriteLine(main.TextBox9.Text);    //Длин ступ. колеса лев.
         file5.WriteLine(main.TextBox10.Text);   //диам отв прав.
         file5.WriteLine(main.TextBox11.Text);   //диам отв лев.
         file5.WriteLine(main.TextBox12.Text);   //диам подступ части оси прав.
         file5.WriteLine(main.TextBox13.Text);   //диам подступ части оси лев.
         file5.WriteLine(main.TextBox14.Text);   //натяг прав.
         file5.WriteLine(main.TextBox15.Text);   //натяг лев.
         file5.WriteLine(Pphh1.ToString());      //текущий Pphh1 прав.
         file5.WriteLine(Pphh2.ToString());      //текущий Pphh2 лев.
         file5.Close();
         gn++;//один раз выполнится для того что бы вписать параметры в файл gn=1
         }//count 0
   
     System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true); //count 0
     if (koleso==1){file.WriteLine("left");count=1;} //count 0
     if (koleso==3){file.WriteLine("right");count=1;} //count 0
     file.Close(); //count 0
     } //count 0

//     if (stop){work_off=1;ToggleBit(koleso,1);stop=0;}



     if (!(TestDlin))////если нет флага тестового заезда))))
     {


     if ((konz_virt!=0)&amp;(I&gt;=0))////Мегажесть2 
     {
     
     X2=I*2+c_x;

     Y2=c_y  - P*0.36;
     g1.DrawLine(koord, X1,Y1,X2,Y2);
     X1=X2;Y1=Y2;
     koord.Dispose();
     g1.Dispose();
     System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);
     file.WriteLine(I.ToString().Replace(',','.')+";"+P.ToString().Replace(',','.'));
     count=1; //После первого цикла count = 1 !!!! и верхний код не выполняется!!!
     file.Close();
     main.Button3.Enable=false;
     liniya=0;
        if (koleso==1){     //левое колесо
		
  //         if(I&lt;=Lphh1){Phh1=P; main.TextBox18.Text = Phh1.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
  //         else {  if(P&lt;(Phh1+Pphh1)){Lhh1=I;}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))

            //далее идет жопажопная :)		   
		    if(I&lt;=Lphh1){ if ((P-Phh1)&lt;Pphh1)  {Phh1=P;Lhh1=I;}}  //замеряем усилие Х.Х.(точка А (x,Phh)) замеряем длинну Х.Х.(точка А (Lhh,y))

		   
		   

           Pmax1=P-(Phh1); Pmax1N=Pmax1/9.80665; Lmax1=(I-Lhh1); //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения    
                      }

       if (koleso==3){     //правое колесо
           if(I&lt;=Lphh2){Phh2=P;main.TextBox20.Text = Phh2.ToString().Replace('.',',');}   //замеряем усилие Х.Х.(точка А (x,Phh))
           else {  if(P&lt;(Phh2+Pphh2)){Lhh2=I;}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
   
           Pmax2=P-(Phh2); Pmax2N=Pmax2/9.80665; Lmax2=(I-Lhh2); //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения   
                     } 
      
     }
     else  
     {
     while (liniya==0){Lhh1=0;//кусок жопыжопной
                     // if (koleso==1) {main.TextBox16.Text = Pmax1.ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,669);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine(I.ToString().Replace(',','.')+";"+"0.0"); file.Close();} //линия вниз левое колесо
                     // if (koleso==3) {main.TextBox17.Text = Pmax2.ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,1011);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine(I.ToString().Replace(',','.')+";"+"0.0"); file.Close();}//линия вниз правое колесо
                      if (koleso==1) {main.TextBox19.Text = (Phh1+Pmax1).ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,573);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine(((X1-260)/2).ToString().Replace(',','.')+";"+"0.0"); file.Close();} //линия вниз левое колесо
                      if (koleso==3) {main.TextBox21.Text = (Phh2+Pmax2).ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,1009);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine(((X1-260)/2).ToString().Replace(',','.')+";"+"0.0"); file.Close();}//линия вниз правое колесо                      
                      liniya=1;
                      }
     }

     }
     else ////Есть флаг тестового заезда

     {


     if ((konz_virt!=0)&amp;(I&gt;=0))
     {
     

     if (P&lt;100)////условие для записи длинны по конечному давлению
     {
     X2=I*2+c_x;

     Y2=c_y  - P*0.36;
     g1.DrawLine(koord, X1,Y1,X2,Y2);
     X1=X2;Y1=Y2;
     koord.Dispose();
     g1.Dispose();
     System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);
     file.WriteLine(I.ToString().Replace(',','.')+";"+P.ToString().Replace(',','.'));
     count=1; //После первого цикла count = 1 !!!! и верхний код не выполняется!!!
     file.Close();
     main.Button3.Enable=false;
     liniya=0;
       if (koleso==1){     //левое колесо
           if(I&lt;=Lphh1){Phh1=P; main.TextBox18.Text = Phh1.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
           else {  if(P&lt;(Phh1+Pphh1)){Lhh1=I;}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))

           Pmax1=P-(Phh1); Pmax1N=Pmax1/9.80665; Lmax1=(I-Lhh1); //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения    
                      }

       if (koleso==3){     //правое колесо
           if(I&lt;=Lphh2){Phh2=P;main.TextBox20.Text = Phh2.ToString().Replace('.',',');}   //замеряем усилие Х.Х.(точка А (x,Phh))
           else {  if(P&lt;(Phh2+Pphh2)){Lhh2=I;}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
   
           Pmax2=P-(Phh2); Pmax2N=Pmax2/9.80665; Lmax2=(I-Lhh2); //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения   
                     } 
     }


     }
     else  
     {
     while (liniya==0){
                     // if (koleso==1) {main.TextBox16.Text = Pmax1.ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,669);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine(I.ToString().Replace(',','.')+";"+"0.0"); file.Close();} //линия вниз левое колесо
                     // if (koleso==3) {main.TextBox17.Text = Pmax2.ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,1011);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine(I.ToString().Replace(',','.')+";"+"0.0"); file.Close();}//линия вниз правое колесо
                      if (koleso==1) {main.TextBox19.Text = (Phh1+Pmax1).ToString().Replace('.',','); g1.DrawLine(koord, X1,Y1,X1,573);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine((X1-260).ToString().Replace(',','.')+";"+"0.0"); file.Close();} //линия вниз левое колесо
                      if (koleso==3) {main.TextBox21.Text = (Phh2+Pmax2).ToString().Replace('.',',');g1.DrawLine(koord, X1,Y1,X1,1009);System.IO.StreamWriter file = new System.IO.StreamWriter(path + name +".csv", true);file.WriteLine((X1-260).ToString().Replace(',','.')+";"+"0.0"); file.Close();}//линия вниз правое колесо                      
                      liniya=1;
                      }
     }

     }


}
else
{
NewPort_NewDevice_count_1=0;I=0;
       if (work_off==1){ToggleBit(koleso,1);work_off=0;}; //нет концевика 5 с то выполняется код по else

work_off=0; //хрен знает для чего какая то накладка на работу чего то

       if (gn==2){gn=0;}; //если нажмут принтскрин то gn=2 выполнится код и станет gn=0, при след замыкании концевика впишутся параметры в файл
count=0;
main.CheckBox2.Enable=true;
main.Button2.Enable=true;
main.Button5.Enable=true;
//main.Button7.Enable=true;
main.Button9.Enable=true;
Screen4.Button9.Enable=true;
main.DigitalBox1.Enable=true;
main.DigitalBox2.Visible=false;  
main.DigitalBox5.Visible=false;  
//main.NumericUpDown2.Visible=false;  
//main.NumericUpDown5.Visible=false;  
}

/////////////////////////////////////Восстановление главного экрана
System.Drawing.Pen koord_q;
koord_q = new System.Drawing.Pen(System.Drawing.Color.Black,1);
System.Drawing.Graphics g3 = main.CreateGraphics();
Double proba;


main.LabelFile.Text=path + name +".csv";
if (restore==1)
{
System.IO.StreamReader file2 = new System.IO.StreamReader(path + name +".csv");



//Пропустить параметры
string stroka = file2.ReadLine();   //№ Диаграммы
stroka = file2.ReadLine();    //Дата запресовки
stroka = file2.ReadLine();    //Тип колесной пары
stroka = file2.ReadLine();    //нету (ось №)
stroka = file2.ReadLine();    //Колесо прав.
stroka = file2.ReadLine();    //Колесо лев.
stroka = file2.ReadLine();    //Длин ступ. колеса прав.
stroka = file2.ReadLine();    //Я хз резерв пусть
stroka = file2.ReadLine();    //Длин ступ. колеса лев.
stroka = file2.ReadLine();    //диам отв прав.
stroka = file2.ReadLine();    //диам отв лев.
stroka = file2.ReadLine();    //диам подступ части оси прав.
stroka = file2.ReadLine();    //диам подступ части оси лев.
stroka = file2.ReadLine();    //натяг прав.
stroka = file2.ReadLine();    //натяг лев.
Double Pphh1_ist = Convert.ToDouble(file2.ReadLine().Replace(',','.')); //текущий Pphh1 прав.
Double Pphh2_ist = Convert.ToDouble(file2.ReadLine().Replace(',','.')); //текущий Pphh2 лев.
//Огонёк


stroka = file2.ReadLine();
     if (stroka == "left")
     {
     c_x=260;c_y=573;
     X3=c_x;Y3=c_y;     
     stroka = file2.ReadLine();
          while ((stroka!= "right")&amp;&amp;(stroka!=null))

          {
          string[] parts1 = stroka.Split(';');
          
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;////////////////сюда
//Мегажесть
//proba=Convert.ToDouble(parts1[0])+c_x;
//X4=System.Math.Round(proba,0);

          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;
//proba=c_y-Convert.ToDouble(parts1[1])*3;
//Y4=System.Math.Round(proba,0);
//////////////////////////////////////////////

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh1){Phh1=(Convert.ToDouble(parts1[1])); main.TextBox18.Text = Phh1.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh1+Pphh1_ist)){Lhh1=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0) {Pmax1=(Convert.ToDouble(parts1[1]))-(Phh1); Pmax1N=Pmax1/9.80665; main.TextBox19.Text = (Phh1+Pmax1).ToString().Replace('.',','); Lmax1=((Convert.ToDouble(parts1[0]))-Lhh1);} //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения     

          g3.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

          //if (Convert.ToDouble(parts1[1])!=0.0) {main.TextBox17.Text = (Convert.ToDouble(parts1[1])-Phh_ist).ToString().Replace('.',',');}//////Конечное усилие левое

          stroka = file2.ReadLine();
          }
     stroka = file2.ReadLine();
     c_x=260;c_y=1009;
     X3=c_x;Y3=c_y;     
          while (stroka!=null)
          {
          string[] parts1 = stroka.Split(';');
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;////////////////сюда
//Мегажесть
//proba=Convert.ToDouble(parts1[0])+c_x;
//X4=System.Math.Round(proba,0);

          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;
//proba=c_y-Convert.ToDouble(parts1[1])*3;
//Y4=System.Math.Round(proba,0);
//////////////////////////////////////////////

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh2){Phh2=(Convert.ToDouble(parts1[1])); main.TextBox20.Text = Phh2.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh2+Pphh2_ist)){Lhh2=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0) {Pmax2=(Convert.ToDouble(parts1[1]))-(Phh2); Pmax2N=Pmax2/9.80665;main.TextBox21.Text = (Phh2+Pmax2).ToString().Replace('.',','); Lmax2=((Convert.ToDouble(parts1[0]))-Lhh2); }//замеряем конеч. усилие, переводим в Т*С и длинну сопряжения     
         
          g3.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

          //if (Convert.ToDouble(parts1[1])!=0.0) {main.TextBox16.Text = (Convert.ToDouble(parts1[1])-Phh_ist).ToString().Replace('.',',');}//////Конечное усилие правое

          stroka = file2.ReadLine();
          }
       }

     if (stroka == "right")
     {
     c_x=260;c_y=1009;
     X3=c_x;Y3=c_y; 
     stroka = file2.ReadLine();
          while ((stroka!= "left")&amp;&amp;(stroka!=null))
          {
          string[] parts1 = stroka.Split(';');
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;////////////////сюда
//Мегажесть
//proba=Convert.ToDouble(parts1[0])+c_x;
//X4=System.Math.Round(proba,0);

          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;
//proba=c_y-Convert.ToDouble(parts1[1])*3;
//Y4=System.Math.Round(proba,0);
//////////////////////////////////////////////

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh2){Phh2=(Convert.ToDouble(parts1[1])); main.TextBox20.Text = Phh2.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh2+Pphh2_ist)){Lhh2=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0) {Pmax2=(Convert.ToDouble(parts1[1]))-(Phh2); Pmax2N=Pmax2/9.80665;main.TextBox21.Text = (Phh2+Pmax2).ToString().Replace('.',',');  Lmax2=((Convert.ToDouble(parts1[0]))-Lhh2); }//замеряем конеч. усилие, переводим в Т*С и длинну сопряжения   

          g3.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

          //if (Convert.ToDouble(parts1[1])!=0.0) {main.TextBox16.Text = (Convert.ToDouble(parts1[1])-Phh_ist).ToString().Replace('.',',');}//////Конечное усилие правое

          stroka = file2.ReadLine();
          }
     stroka = file2.ReadLine();
     c_x=260;c_y=573;
     X3=c_x;Y3=c_y;     
          while (stroka!=null)
          {
          string[] parts1 = stroka.Split(';');
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;////////////////сюда
//Мегажесть
//proba=Convert.ToDouble(parts1[0])+c_x;
//X4=System.Math.Round(proba,0);

          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;
//proba=c_y-Convert.ToDouble(parts1[1])*3;
//Y4=System.Math.Round(proba,0);
//////////////////////////////////////////////

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh1){Phh1=(Convert.ToDouble(parts1[1])); main.TextBox18.Text = Phh1.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh1+Pphh1_ist)){Lhh1=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0) {Pmax1=(Convert.ToDouble(parts1[1]))-(Phh1); Pmax1N=Pmax1/9.80665;main.TextBox19.Text = (Phh1+Pmax1).ToString().Replace('.',','); Lmax1=((Convert.ToDouble(parts1[0]))-Lhh1);} //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения    

          g3.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

          //if (Convert.ToDouble(parts1[1])!=0.0) {main.TextBox17.Text = (Convert.ToDouble(parts1[1])-Phh_ist).ToString().Replace('.',',');}//////Конечное усилие левое

          stroka = file2.ReadLine();
          }
      }
koord_q.Dispose();
g3.Dispose();

file2.Close();
restore=0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
System.Drawing.Pen koord_r;
koord_r = new System.Drawing.Pen(System.Drawing.Color.Black,1);
System.Drawing.Graphics g2 = Screen4.CreateGraphics();
int N=0;
string[] csvList = System.IO.Directory.GetFiles(path, "*.csv");     //массив файликов
N=csvList.Length;
N_1=N;
int i=0;

if (copy_to_usb)
{
     if (System.IO.Directory.Exists("\\Hard Disk\\"))
     {
          // Copy *.csv files
          foreach (string f in csvList)
          {
          string fName = f.Substring(razmer);
          System.IO.File.Copy(System.IO.Path.Combine(path, fName), System.IO.Path.Combine(path_usb, fName),true);
          }
     }

copy_to_usb=0;
}

Screen4.ComboBox2.Items.Clear();//нулим ComboBox
while (i&lt;N) {Screen4.ComboBox2.Items.Add("");string b=csvList[(N-1)-i].Substring(0,csvList[(N-1)-i].Length - 4); Screen4.ComboBox2.Items[i]=b.Substring(razmer).Replace('.','.');i++;}//добавляем полей сколько файлов нашли и заполняем в обратной последовательности

if (luper==1)
{
System.IO.StreamReader file2 = new System.IO.StreamReader(path+Screen4.ComboBox2.Items[Tag1].Replace('.','_')+".csv");



//Прочитать и отобразить параметры
Screen4.TextBox1.Text = file2.ReadLine();   //№ Диаграммы
Screen4.TextBox2.Text = file2.ReadLine();   //Дата запресовки
Screen4.TextBox3.Text = file2.ReadLine();   //Тип колесной пары
Screen4.TextBox4.Text = file2.ReadLine();   //нету (ось №)
Screen4.TextBox5.Text  = file2.ReadLine();  //Колесо прав.
Screen4.TextBox6.Text = file2.ReadLine();   //Колесо лев.
Screen4.TextBox7.Text = file2.ReadLine();   //Длин ступ. колеса прав.
Screen4.TextBox8.Text = file2.ReadLine();   //Я хз резерв пусть
Screen4.TextBox9.Text = file2.ReadLine();   //Длин ступ. колеса лев.
Screen4.TextBox10.Text = file2.ReadLine();  //диам отв прав.
Screen4.TextBox11.Text = file2.ReadLine();  //диам отв лев.
Screen4.TextBox12.Text = file2.ReadLine();  //диам подступ части оси прав.
Screen4.TextBox13.Text = file2.ReadLine();  //диам подступ части оси лев.
Screen4.TextBox14.Text = file2.ReadLine();  //натяг прав.
Screen4.TextBox15.Text = file2.ReadLine();  //натяг лев.
Double Pphh1_ist_luper = Convert.ToDouble(file2.ReadLine().Replace(',','.')); //текущий Pphh1 прав.
Double Pphh2_ist_luper = Convert.ToDouble(file2.ReadLine().Replace(',','.')); //текущий Pphh2 лев.

//Огонёк


string stroka = file2.ReadLine();
     if (stroka == "left")
     {
     c_x=260;c_y=573;
     X3=c_x;Y3=c_y;     
     stroka = file2.ReadLine();
          while ((stroka!= "right")&amp;&amp;(stroka!=null))
          {
          string[] parts1 = stroka.Split(';');
      
      //X_rest=Convert.ToDouble(parts1[0])+c_x;
      //Round(X4,X_rest);
      //Y_rest=c_y-Convert.ToDouble(parts1[1])*3;
      //Round(Y4,Y_rest);     
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;
          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh1){Phh1=(Convert.ToDouble(parts1[1])); Screen4.TextBox18.Text = Phh1.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh1+Pphh1_ist_luper)){Lhh1=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0){Pmax1=(Convert.ToDouble(parts1[1]))-(Phh1); Pmax1N=Pmax1/9.80665; Screen4.TextBox19.Text = (Phh1+Pmax1).ToString().Replace('.',','); Lmax1=((Convert.ToDouble(parts1[0]))-Lhh1);} //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения     
          
          g2.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;


            //if (Convert.ToDouble(parts1[1])!=0.0) {Screen4.TextBox17.Text = (Convert.ToDouble(parts1[1])-Phh_ist_luper).ToString().Replace('.',',');}//////Конечное усилие левое

          stroka = file2.ReadLine();
          }
     stroka = file2.ReadLine();
     c_x=260;c_y=1009;
     X3=c_x;Y3=c_y;     
          while (stroka!=null)
          {
          string[] parts1 = stroka.Split(';');
      //X_rest=Convert.ToDouble(parts1[0])+c_x;
      //Round(X4,X_rest);
      //Y_rest=c_y-Convert.ToDouble(parts1[1])*3;
      //Round(Y4,Y_rest);       
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;
          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh2){Phh2=(Convert.ToDouble(parts1[1])); Screen4.TextBox20.Text = Phh2.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh2+Pphh2_ist_luper)){Lhh2=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0){Pmax2=(Convert.ToDouble(parts1[1]))-(Phh2); Pmax2N=Pmax2/9.80665;Screen4.TextBox21.Text = (Phh2+Pmax2).ToString().Replace('.',','); Lmax2=((Convert.ToDouble(parts1[0]))-Lhh2);} //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения    

          g2.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

           // if (Convert.ToDouble(parts1[1])!=0.0) {Screen4.TextBox16.Text = (Convert.ToDouble(parts1[1])-Phh_ist_luper).ToString().Replace('.',',');}//////Конечное усилие правое

          stroka = file2.ReadLine();
          }
       }

     if (stroka == "right")
     {
     c_x=260;c_y=1009;
     X3=c_x;Y3=c_y; 
     stroka = file2.ReadLine();
          while ((stroka!= "left")&amp;&amp;(stroka!=null))
          {
          string[] parts1 = stroka.Split(';');
      //X_rest=Convert.ToDouble(parts1[0])+c_x;
      //Round(X4,X_rest);
      //Y_rest=c_y-Convert.ToDouble(parts1[1])*3;
      //Round(Y4,Y_rest);       
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;
          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh2){Phh2=(Convert.ToDouble(parts1[1])); Screen4.TextBox20.Text = Phh2.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh2+Pphh2_ist_luper)){Lhh2=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0){Pmax2=(Convert.ToDouble(parts1[1]))-(Phh2); Pmax2N=Pmax2/9.80665; Screen4.TextBox21.Text = (Phh2+Pmax2).ToString().Replace('.',','); Lmax2=((Convert.ToDouble(parts1[0]))-Lhh2);} //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения   

          g2.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

          //  if (Convert.ToDouble(parts1[1])!=0.0) {Screen4.TextBox16.Text = (Convert.ToDouble(parts1[1])-Phh_ist_luper).ToString().Replace('.',',');}//////Конечное усилие правое

          stroka = file2.ReadLine();
          }
     stroka = file2.ReadLine();
     c_x=260;c_y=573;
     X3=c_x;Y3=c_y;     
          while (stroka!=null)
          {
          string[] parts1 = stroka.Split(';');
      //X_rest=Convert.ToDouble(parts1[0])+c_x;
      //Round(X4,X_rest);
      //Y_rest=c_y-Convert.ToDouble(parts1[1])*3;
      //Round(Y4,Y_rest);       
          X4=(Convert.ToDouble(parts1[0]))*2+c_x;
          Y4=c_y-Convert.ToDouble(parts1[1])*0.36;

          if((Convert.ToDouble(parts1[0]))&lt;=Lphh1){Phh1=(Convert.ToDouble(parts1[1])); Screen4.TextBox18.Text = Phh1.ToString().Replace('.',',');}  //замеряем усилие Х.Х.(точка А (x,Phh))
          else {  if((Convert.ToDouble(parts1[1]))&lt;(Phh1+Pphh1_ist_luper)){Lhh1=(Convert.ToDouble(parts1[0]));}  }                                          //замеряем длинну Х.Х.(точка А (Lhh,y))
          if (Convert.ToDouble(parts1[1])!=0.0){Pmax1=(Convert.ToDouble(parts1[1]))-(Phh1); Pmax1N=Pmax1/9.80665; Screen4.TextBox19.Text = (Phh1+Pmax1).ToString().Replace('.',','); Lmax1=((Convert.ToDouble(parts1[0]))-Lhh1);} //замеряем конеч. усилие, переводим в Т*С и длинну сопряжения    

          g2.DrawLine(koord_q, X3,Y3,X4,Y4);
          X3=X4;Y3=Y4;

           // if (Convert.ToDouble(parts1[1])!=0.0) {Screen4.TextBox17.Text = (Convert.ToDouble(parts1[1])-Phh_ist_luper).ToString().Replace('.',',');}//////Конечное усилие левое

          stroka = file2.ReadLine();
          }
      }
koord_q.Dispose();
g2.Dispose();

luper=0;
file2.Close();
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ControlsLib.TextBox  t;
int p=q;
switch (p)
{
case 1: t=main.TextBox1;break;
case 2: t=main.TextBox2;break;
case 4: t=main.TextBox4;break;
case 5: t=main.TextBox5;break;
case 6: t=main.TextBox6;break;
case 7: t=main.TextBox7;break;
case 8: t=main.TextBox8;break;
case 9: t=main.TextBox9;break;
case 10: t=main.TextBox10;break;
case 11: t=main.TextBox11;break;
case 12: t=main.TextBox12;break;
case 13: t=main.TextBox13;break;
case 14: t=main.TextBox14;break;
case 15: t=main.TextBox15;break;
case 16: t=main.TextBox16;break;
case 17: t=main.TextBox17;break;




default: t=Screen3.TextBox1;break;
}
if (t.Text.Length==0){while(z&lt;1){TurnBitOn(N_KEY,2);z++;}}else {z=0;}
Screen3.TextBox1.Text=t.Text;

if ((q&gt;=10)&amp;(q&lt;=15)&amp;(tx&lt;11)) {TurnBitOff(N_KEY,2);}

if ((main.TextBox12.Text.Length!=0)&amp;(main.TextBox13.Text.Length!=0)&amp;(main.TextBox14.Text.Length!=0)&amp;(main.TextBox15.Text.Length!=0))
{
main.TextBox10.Text=(Convert.ToDouble(main.TextBox12.Text.Replace(',','.')) - Convert.ToDouble(main.TextBox14.Text.Replace(',','.'))).ToString().Replace('.',',');
main.TextBox11.Text=(Convert.ToDouble(main.TextBox13.Text.Replace(',','.')) - Convert.ToDouble(main.TextBox15.Text.Replace(',','.'))).ToString().Replace('.',',');}</Expression>
  </Function>
  <Function>
    <Name>Function2</Name>
    <Expression>I++;</Expression>
  </Function>
  <Function>
    <Name>init</Name>
    <Expression> //delete *.csv files
string[] csvList = System.IO.Directory.GetFiles(path, "*.csv"); 
foreach (string f in csvList)
{
System.IO.File.Delete(f);
}
</Expression>
  </Function>
  <Function>
    <Name>Function3</Name>
    <Expression>string[] klava_en={"","`","1","2","3","4","5","6","7","8","9","0","-","=","\\","q","w","e","r","t","y","u","i","o","p","[","]","a","s","d","f","g","h","j","k","l",";","'","z","x","c","v","b","n","m",",",".","/"," "};
string[] klava_ru={"","ё","1","2","3","4","5","6","7","8","9","0","-","=","\\","й","ц","у","к","е","н","г","ш","щ","з","х","ъ","ф","ы","в","а","п","р","о","л","д","ж","э","я","ч","с","м","и","т","ь","б","ю","."," "};
string[] klava_en_caps={"","`","1","2","3","4","5","6","7","8","9","0","-","=","\\","Q","W","E","R","T","Y","U","I","O","P","[","]","A","S","D","F","G","H","J","K","L",";","'","Z","X","C","V","B","N","M",",",".","/"," "};
string[] klava_ru_caps={"","Ё","1","2","3","4","5","6","7","8","9","0","-","=","\\","Й","Ц","У","К","Е","Н","Г","Ш","Щ","З","Х","Ъ","Ф","Ы","В","А","П","Р","О","Л","Д","Ж","Э","Я","Ч","С","М","И","Т","Ь","Б","Ю","."," "};

string[] klava_en_shift={"","~","!","@","#","$","%","^","&amp;","*","(",")","_","+","|","Q","W","E","R","T","Y","U","I","O","P","{","}","A","S","D","F","G","H","J","K","L",":","&amp;#034","Z","X","C","V","B","N","M","&lt;","&gt;","?"," "};
string[] klava_ru_shift={"","Ё","!","&amp;#034","№",";","%",":","?","*","(",")","_","+","/","Й","Ц","У","К","Е","Н","Г","Ш","Щ","З","Х","Ъ","Ф","Ы","В","А","П","Р","О","Л","Д","Ж","Э","Я","Ч","С","М","И","Т","Ь","Б","Ю",","," "};

string[] klava_en_shift_caps={"","~","!","@","#","$","%","^","&amp;","*","(",")","_","+","|","q","w","e","r","t","y","u","i","o","p","{","}","a","s","d","f","g","h","j","k","l",":","{&amp;#034}","z","x","c","v","b","n","m","&lt;","&gt;","?"," "};
string[] klava_ru_shift_caps={"","Ё","!","&amp;#034","№",";","%",":","?","*","(",")","_","+","/","й","ц","у","к","е","н","г","ш","щ","з","х","ъ","ф","ы","в","а","п","р","о","л","д","ж","э","я","ч","с","м","и","т","ь","б","ю",","," "};



ControlsLib.TextBox  t;
int p=q;
switch (p)
{
case 1: t=main.TextBox1;break;
case 2: t=main.TextBox2;break;
case 4: t=main.TextBox4;break;
case 5: t=main.TextBox5;break;
case 6: t=main.TextBox6;break;
case 7: t=main.TextBox7;break;
case 8: t=main.TextBox8;break;
case 9: t=main.TextBox9;break;
case 10: t=main.TextBox10;break;
case 11: t=main.TextBox11;break;
case 12: t=main.TextBox12;break;
case 13: t=main.TextBox13;break;
case 14: t=main.TextBox14;break;
case 15: t=main.TextBox15;break;
case 16: t=main.TextBox16;break;
case 17: t=main.TextBox17;break;


default: t=Screen3.TextBox1;break;
}
if ((q&gt;=10)&amp;(q&lt;=15)&amp;(tx&gt;11)&amp;(tx!=46)&amp;(tx!=45) &amp; ((N_KEY==0) | (N_KEY==2)) ){tx=0;}
if ((q&gt;=10)&amp;(q&lt;=15)&amp;(tx&gt;11)&amp;(tx!=47) &amp; ((N_KEY==1) | (N_KEY==3)) ){tx=0;}

int n=N_KEY;


switch (n)
{
case 0: t.Text+=klava_en[tx];  break;
case 1: t.Text+=klava_ru[tx];  break;
case 2: t.Text+=klava_en_caps[tx];  break;
case 3: t.Text+=klava_ru_caps[tx];  break;
case 4: t.Text+=klava_en_shift[tx]; if (Alt==1){ToggleBit(N_KEY,0);Alt=0;TurnBitOff(N_KEY,2);};if(tx!=0){TurnBitOff(N_KEY,2);} break; 
case 5: t.Text+=klava_ru_shift[tx]; if (Alt==1){ToggleBit(N_KEY,0);Alt=0;TurnBitOff(N_KEY,2);};if(tx!=0){TurnBitOff(N_KEY,2);} break;
case 6: t.Text+=klava_en_shift_caps[tx];if (Alt==1){ToggleBit(N_KEY,0);Alt=0;TurnBitOff(N_KEY,2);}; if(tx!=0){TurnBitOff(N_KEY,2);} break; 
case 7: t.Text+=klava_ru_shift_caps[tx]; if (Alt==1){ToggleBit(N_KEY,0);Alt=0;TurnBitOff(N_KEY,2);}; if(tx!=0){TurnBitOff(N_KEY,2);} break;
}


int b=t.Text.Length;
if (clear==1) {t.Text="";clear=0;}
if ((bs==1)&amp;(b&gt;0)){t.Text = t.Text.Substring(0, b - 1);bs=0;}

tx=0;




</Expression>
  </Function>
  <Function>
    <Name>Function4</Name>
    <Expression>//reset= !NewPort_NewDevice_bit_mask_1; 
reset= !konz_virt;
GotoFirstPage();
 </Expression>
  </Function>
  <SystemTag>
    <Name>CurrentPage</Name>
    <Type>Analog</Type>
    <Comment>Current Page</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>CurrentUser</Name>
    <Type>String</Type>
    <Comment>Current User</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>CurrentSecurityLevel</Name>
    <Type>Analog</Type>
    <Comment>Current Security Level</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>TriggerPer100ms</Name>
    <Type>Digital</Type>
    <Comment>Trigger Per 100 milli second</Comment>
    <Scan>0</Scan>
    <ScanRate>100</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>TriggerPer1sec</Name>
    <Type>Digital</Type>
    <Comment>Trigger Per 1 second</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>MemoryFull</Name>
    <Type>Digital</Type>
    <Comment>Memory Full</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>MemoryAvailablePresent</Name>
    <Type>Analog</Type>
    <Comment>Memory Available Present</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>NumberofRealtimeAlarm</Name>
    <Type>Analog</Type>
    <Comment>Number of Realtime Alarm</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>NumberofHistoricalAlarm</Name>
    <Type>Analog</Type>
    <Comment>Number of Historical Alarm</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>ScreenSaverTime</Name>
    <Type>Analog</Type>
    <Comment>Unit: Minute, 0: Disable</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>BeeperEnable</Name>
    <Type>Digital</Type>
    <Comment>Beeper Enable</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>BeepVolume</Name>
    <Type>Analog</Type>
    <Comment>0~100</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>Backlight</Name>
    <Type>Analog</Type>
    <Comment>0~100</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_Day</Name>
    <Type>Analog</Type>
    <Comment>RTC Day</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_Month</Name>
    <Type>Analog</Type>
    <Comment>RTC Month</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_Year</Name>
    <Type>Analog</Type>
    <Comment>RTC Year</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_Hour</Name>
    <Type>Analog</Type>
    <Comment>RTC Hour</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_Min</Name>
    <Type>Analog</Type>
    <Comment>RTC Min</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_Sec</Name>
    <Type>Analog</Type>
    <Comment>RTC Sec</Comment>
    <Scan>0</Scan>
    <ScanRate>100</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>RTC_DayofWeek</Name>
    <Type>Analog</Type>
    <Comment>RTC Dayof Week</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>IsDataLoging</Name>
    <Type>Digital</Type>
    <Comment>Start or Stop Datalog </Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>SystemDI_1</Name>
    <Type>Digital</Type>
    <Comment>Option</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>SystemDI_2</Name>
    <Type>Digital</Type>
    <Comment>Option</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>SystemDI_3</Name>
    <Type>Digital</Type>
    <Comment>Option</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>1</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>SystemDO_1</Name>
    <Type>Digital</Type>
    <Comment>Option</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>SystemDO_2</Name>
    <Type>Digital</Type>
    <Comment>Option</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>SystemDO_3</Name>
    <Type>Digital</Type>
    <Comment>Option</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>LanguageIndex</Name>
    <Type>Analog</Type>
    <Comment>Language Index</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>InputTag</Name>
    <Type>String</Type>
    <Comment>For input data function</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>1</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>CurrentRecipeName</Name>
    <Type>String</Type>
    <Comment>Current recipe name</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <SystemTag>
    <Name>CurrentRecipeDataRecord</Name>
    <Type>String</Type>
    <Comment>Current recipe data record</Comment>
    <Scan>0</Scan>
    <ScanRate>1000</ScanRate>
    <ReadOnly>0</ReadOnly>
    <DisplayStartIdx>0</DisplayStartIdx>
    <DisplayCount>0</DisplayCount>
    <VisibleStartIdx>0</VisibleStartIdx>
    <VisibleCount>0</VisibleCount>
    <RunModeType>0</RunModeType>
  </SystemTag>
  <Conversion>
    <Name>Conversion1</Name>
    <Type>0</Type>
    <EngHigh>600</EngHigh>
    <EngLow>0</EngLow>
    <RangeLow>4000</RangeLow>
    <Ggin>1</Ggin>
    <Offset>0</Offset>
    <ReadExpression>Value=((Value-4000.0)/(6000.0-4000.0))*(600.0-0.0)+0.0;</ReadExpression>
    <WriteExpression>Value=((Value-0.0)*(6000.0-4000.0))/(600.0-0.0)+4000.0;</WriteExpression>
    <RangeHigh>6000</RangeHigh>
  </Conversion>
  <Conversion>
    <Name>Conversion2</Name>
    <Type>0</Type>
    <EngHigh>500</EngHigh>
    <EngLow>0</EngLow>
    <RangeLow>4000</RangeLow>
    <Ggin>1</Ggin>
    <Offset>0</Offset>
    <ReadExpression>Value=((Value-4000.0)/(20000.0-4000.0))*(500.0-0.0)+0.0;</ReadExpression>
    <WriteExpression>Value=((Value-0.0)*(20000.0-4000.0))/(500.0-0.0)+4000.0;</WriteExpression>
    <RangeHigh>20000</RangeHigh>
  </Conversion>
  <Conversion>
    <Name>Conversion3</Name>
    <Type>0</Type>
    <EngHigh>1890</EngHigh>
    <EngLow>0</EngLow>
    <RangeLow>4000</RangeLow>
    <Ggin>1</Ggin>
    <Offset>0</Offset>
    <ReadExpression>Value=((Value-4000.0)/(20000.0-4000.0))*(1890.0-0.0)+0.0;</ReadExpression>
    <WriteExpression>Value=((Value-0.0)*(20000.0-4000.0))/(1890.0-0.0)+4000.0;</WriteExpression>
    <RangeHigh>20000</RangeHigh>
  </Conversion>
</HMIDataSet>